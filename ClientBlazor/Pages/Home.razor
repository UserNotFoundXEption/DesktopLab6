@page "/"
@inject HttpClient Http
@using Shared
@inject IJSRuntime JSRuntime

<h3>Product Management</h3>

<p>
    <input class="form-control d-inline-block w-25" @bind="filterByName" placeholder="Filter by name" />
    <button class="btn btn-primary ms-2" @onclick="LoadProducts">Search</button>
    <button class="btn btn-success ms-2" @onclick="ShowAddForm">Add Product</button>
</p>

<table class="table table-striped">
    <thead>
        <tr>
            <th>
                <button class="btn btn-link" @onclick="SortByName">Name</button>
            </th>
            <th>
                <button class="btn btn-link" @onclick="SortByPrice">Price</button>
            </th>
            <th>
                <button class="btn btn-link">Units Available</button>
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (products.Any())
        {
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.UnitsAvailable</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditProduct(product)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.Name)">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3" class="text-center">No products found</td>
            </tr>
        }
    </tbody>
</table>

@if (showForm)
{
    <div class="mt-3 p-3 border rounded">
        <h4>@(editingProduct != null ? "Edit Product" : "Add Product")</h4>
        <div class="form-group mb-2">
            <label>Name</label>
            <input class="form-control" @bind="formProduct.Name" placeholder="Name" disabled="@formProductDisabled" />
        </div>
        <div class="form-group mb-2">
            <label>Price</label>
            <input class="form-control" @bind="formProduct.Price" placeholder="Price" type="number" />
        </div>
        <div class="form-group mb-2">
            <label>Units Available</label>
            <input class="form-control" @bind="formProduct.UnitsAvailable" placeholder="Units Available" type="number" />
        </div>
        <button class="btn btn-primary" @onclick="SaveProduct">Save</button>
        <button class="btn btn-secondary ms-2" @onclick="CancelForm">Cancel</button>
    </div>
}

@code {
    private List<Product> products = new();
    private Product formProduct = new();
    private Product? editingProduct = null;
    private bool showForm = false;
    private bool formProductDisabled = false;
    private string? filterByName = null;
    private string? sortBy = null;
    private string? sortOrder = "asc";

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            var url = "products";
            var parameters = new List<string>();

            if (!string.IsNullOrWhiteSpace(filterByName))
            {
                parameters.Add($"filterByName={filterByName}");
            }

            if (!string.IsNullOrWhiteSpace(sortBy))
            {
                parameters.Add($"sortBy={sortBy}&sortOrder={sortOrder}");
            }

            if (parameters.Any())
            {
                url += "?" + string.Join("&", parameters);
            }

            products = await Http.GetFromJsonAsync<List<Product>>(url) ?? new List<Product>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
    }

    private void SortByName()
    {
        if (sortBy == "name")
        {
            sortOrder = sortOrder == "asc" ? "desc" : "asc";
        }
        else
        {
            sortBy = "name";
            sortOrder = "asc";
        }

        LoadProducts();
    }

    private void SortByPrice()
    {
        if (sortBy == "price")
        {
            sortOrder = sortOrder == "asc" ? "desc" : "asc";
        }
        else
        {
            sortBy = "price";
            sortOrder = "asc";
        }

        LoadProducts();
    }

    private void ShowAddForm()
    {
        formProduct = new Product();
        editingProduct = null;
        formProductDisabled = false;
        showForm = true;
    }

    private void EditProduct(Product product)
    {
        formProduct = new Product
            {
                Name = product.Name,
                Price = product.Price,
                UnitsAvailable = product.UnitsAvailable
            };
        editingProduct = product;
        formProductDisabled = true;
        showForm = true;
    }

    private async Task SaveProduct()
    {
        if (string.IsNullOrWhiteSpace(formProduct.Name) || formProduct.Price <= 0 || formProduct.UnitsAvailable <= 0)
        {
            
            Console.WriteLine("Invalid product data");
            await JSRuntime.InvokeVoidAsync("alert", "Invalid product data");
            return;
        }

        try
        {
            if (editingProduct == null)
            {
                await Http.PostAsJsonAsync("products", formProduct);
            }
            else
            {
                await Http.PutAsJsonAsync($"products/{editingProduct.Name}", formProduct);
            }

            await LoadProducts();
            CancelForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving product: {ex.Message}");
        }
    }

    private async Task DeleteProduct(string name)
    {
        try
        {
            await Http.DeleteAsync($"products/{name}");
            await LoadProducts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting product: {ex.Message}");
        }
    }

    private void CancelForm()
    {
        showForm = false;
        formProduct = new Product();
        editingProduct = null;
    }
}
